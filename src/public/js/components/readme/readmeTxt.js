import { imgPath } from '../../assetsPath/assetsPath.js';

const readme = {
  followMe: `
  # <center> Follow Me! </center>

  ![Follow Me!](${imgPath.FOLLOWME} "Follow Me!")
  
  Este c√≥digo JavaScript implementa un juego de memoria en el que los jugadores necesitan repetir una secuencia de luces y sonidos. El juego comienza iluminando una secuencia de cuadrados en un orden espec√≠fico, y el jugador debe replicar la secuencia correctamente para avanzar al siguiente nivel. Cada nivel aumenta la longitud de la secuencia, desafiando las habilidades de memoria del jugador.  
  
  ## Dependencias
  
  [![My Skills](https://skillicons.dev/icons?i=html,css,js)](https://skillicons.dev)

  ## Caracter√≠sticas
  
  - El juego genera una secuencia aleatoria de cuadrados para iluminar.
  - Los jugadores deben hacer clic en los cuadrados en el mismo orden que la secuencia generada.
  - Si el jugador hace clic en la secuencia correcta, el juego avanza al siguiente nivel.
  - Si el jugador comete un error, el juego termina y se muestra el mejor nivel alcanzado.
  - El jugador puede hacer clic en el bot√≥n "Inicio" para reiniciar el juego.
  
  ## Instalaci√≥n
  
  1. Clona el repositorio:

  <pre>
  <code class="hljs language-bash">
    git clone https://github.com/mvazquezmartin/follow-me.git
  </code>
  </pre>
  2. Abrir index.html en tu navegador.    
  
  ## Contribuciones
  
  
  ¬°Las contribuciones son bienvenidas! Si deseas contribuir a este proyecto, si√©ntete libre de bifurcar el repositorio y enviar una solicitud de extracci√≥n.
  
  
  ## Licencia  
  
  Este proyecto est√° bajo la licencia [MIT](https://choosealicense.com/licenses/mit/)
  
  ## Autor
  - [@mvazquezmartin](https://github.com/mvazquezmartin)
  - [LINK](https://mvazquezmartin.github.io/follow-me/)
  - [Repositorio](https://github.com/mvazquezmartin/follow-me)
  `,
  guessTheColor: `
  
# <center>Guess The Color</center>
![Guess The Color Responsives](${imgPath.GUESSTHECOLOR} "Guess The Color")

Esta es una aplicaci√≥n web donde los usuarios pueden adivinar un valor de color RGB ajustando los componentes rojo, verde y azul utilizando controles deslizantes. La suposici√≥n del usuario se compara con un color generado aleatoriamente, y se proporciona retroalimentaci√≥n sobre qu√© tan cerca est√° la suposici√≥n del color correcto.

## Dependencias
[![My Skills](https://skillicons.dev/icons?i=html,css,js)](https://skillicons.dev)

## Caracter√≠sticas

- Controles deslizantes ajustables para los componentes de color rojo, verde y azul.
- Botones para incrementar o decrementar cada componente de color individualmente.
- Retroalimentaci√≥n sobre la cercan√≠a de la suposici√≥n del usuario al color correcto.
- Visual representation of the user's remaining attempts.


## Uso

1. **Ajustar Componentes de Color:** Utiliza los controles deslizantes o los botones de incremento/decremento para ajustar los componentes de color rojo, verde y azul individualmente.

2. **Adivinar el Color:** Una vez que est√©s satisfecho con tu suposici√≥n de color, haz clic en el bot√≥n "GUESS" para ver qu√© tan cerca est√° tu suposici√≥n del color correcto.

3. **Retroalimentaci√≥n:** Despu√©s de adivinar, recibir√°s retroalimentaci√≥n sobre qu√© tan cerca est√° tu suposici√≥n del color correcto. La retroalimentaci√≥n indicar√° el porcentaje de cercan√≠a al color correcto y actualizar√° la representaci√≥n visual de los intentos restantes.

4. **Reiniciar:** Haz clic en el bot√≥n "RESET" en cualquier momento para comenzar un nuevo juego. Esto restablecer√° los componentes de color, los intentos y proporcionar√° un nuevo color generado aleatoriamente para adivinar.


## Instalaci√≥n

1. Conar el repositorio

<pre>
<code class="hljs language-bash">
  git clone https://github.com/mvazquezmartin/guess-the-color.git
</code>
</pre>
2. Abrir index.html en tu navegador.    
## Licencia

Este proyecto est√° bajo la licencia [MIT](https://choosealicense.com/licenses/mit/)

## Autor
- [@mvazquezmartin](https://github.com/mvazquezmartin)
- [LINK](https://mvazquezmartin.github.io/guess-the-color/)
- [Repositorio](https://github.com/mvazquezmartin/guess-the-color)
  `,
  guessTheNumber: `
   # <center> Guess The Number Game </center>
![Guess The Number responsives](${imgPath.GUESSTHENUMBER} "Guess The Number")

Este es un ejemplo de una clase en JavaScript llamada **GuessTheNumberGame** que implementa un juego simple de adivinanza de n√∫meros. Los jugadores intentan adivinar un n√∫mero secreto dentro de un rango espec√≠fico. El juego proporciona retroalimentaci√≥n sobre cada intento y lleva un registro del n√∫mero de intentos realizados.

## Dependencias
[![My Skills](https://skillicons.dev/icons?i=html,css,js)](https://skillicons.dev)
- Archivos de audio para clics en botones: **click-numbers.wav**, **click-btn-guess.wav**, **click-btn-reset.wav**.
- Alertas con **SeewtAlert2**

## Caracter√≠sticas

- **Inicializaci√≥n del Juego:** Al inicializarse, el juego configura los elementos necesarios e inicializa el GameManager.
- **Entrada de N√∫meros:** Los usuarios pueden introducir n√∫meros a trav√©s de una interfaz de teclado num√©rico.
- **Manejo de Suposiciones:** Maneja las suposiciones de los usuarios, proporcionando retroalimentaci√≥n y actualizando la interfaz de usuario del juego en consecuencia.
- **Reinicio del Juego:** Permite a los usuarios reiniciar el juego, eliminando intentos anteriores y restableciendo el n√∫mero secreto.
- **Retroalimentaci√≥n de Audio:** Proporciona retroalimentaci√≥n de audio para interacciones como la selecci√≥n de n√∫meros, adivinanzas y reinicio del juego.

## Uso

1. **Inicializaci√≥n:** Crea una instancia de la clase GuessTheNumberGame para iniciar el juego.

2. **Entrada de N√∫meros:** Utiliza la interfaz del teclado num√©rico para introducir tus suposiciones.

3. **Adivinar:** Haz clic en el bot√≥n "Adivinar" para enviar tu suposici√≥n.

4. **Reinicio:** Haz clic en el bot√≥n "Reiniciar" para reiniciar el juego.


## Ejemplo

<pre>
<code class="hljs language-javascript">
// Initialize the game
const guessTheNumberInit = new GuessTheNumberGame();

// Ensure the DOM is loaded before initializing the game
document.addEventListener('DOMContentLoaded', () => {
  guessTheNumberInit;
});

</code>
</pre>

## Instalaci√≥n

1. Clonar el repositorio:

<pre>
<code>
  git clone https://github.com/mvazquezmartin/guess-the-number-v2.git
</code>
</pre>

2. Abrir index.html en tu navegador.    

## Licencia

This project is licensed under the [MIT](https://choosealicense.com/licenses/mit/)

## Autor
- [@mvazquezmartin](https://github.com/mvazquezmartin)
- [LINK](https://mvazquezmartin.github.io/guess-the-number-v2/)
- [Repositorio](https://github.com/mvazquezmartin/guess-the-number-v2)
  `,
  playground: `
  # <center> üìù PlayGround by EazyTutorial (GreatStack ) </center>
  Se define una funci√≥n que genera una interfaz basada en la web que
  permite a los usuarios escribir y probar fragmentos de c√≥digo HTML, CSS y JavaScript.
  Consta de tres secciones principales: HTML, CSS y JavaScript, junto con un √°rea de salida
  que muestra el resultado combinado del c√≥digo del usuario.
  ## üë∑‚Äç‚ôÇÔ∏è ¬øC√≥mo Funciona?
  
  ### **Renderizaci√≥n del Playground:**
  - La funci√≥n playGroundRender crea una disposici√≥n estructurada de HTML para el playground
  dentro de un elemento contenedor con la clase playGroundGrid.
  ### **Secci√≥n HTML:**
  - Un √°rea de texto con el id htmlCode permite a los usuarios ingresar c√≥digo HTML.
  Se proporciona un ejemplo de c√≥digo HTML por defecto.
  ### **Secci√≥n CSS:**
  - Un √°rea de texto con el id cssCode permite a los usuarios ingresar c√≥digo CSS.
  Se proporciona un ejemplo de c√≥digo CSS por defecto.
  ### **Secci√≥n JavaScript:**
  - Un √°rea de texto con el id javaScriptCode permite a los usuarios ingresar c√≥digo JavaScript.
  Se proporciona un ejemplo de c√≥digo JavaScript por defecto.
  ### **√Årea de Salida:**
  - Se agrega un iframe con el id outPut dentro del √°rea de salida. Este iframe mostrar√°
  el resultado combinado del HTML y el CSS del usuario, junto con el JavaScript ejecutado.
  ### **Ejecuci√≥n Inicial:**
  - La funci√≥n run se llama inicialmente para llenar el √°rea de salida con el ejemplo de c√≥digo
  por defecto.  
  
  ## üìù Nota
  - El c√≥digo proporcionado es un ejemplo b√°sico de una interfaz de playground y se puede
  personalizar y mejorar seg√∫n los requisitos de tu proyecto.
  - Los usuarios pueden modificar el c√≥digo HTML, CSS y JavaScript en tiempo real y observar
  los cambios en el √°rea de salida.
  ## üë§ Authors
  
  - [EazyTutorial](https://www.youtube.com/watch?v=tupa5BRHK4Q&ab_channel=GreatStack)<base target="_blank">
  
  Quiero expresar mi m√°s sincero agradecimiento a EazyTutorial por el incre√≠ble trabajo que
  ha estado haciendo en la comunidad de FrontEnd. Su dedicaci√≥n y pasi√≥n por compartir
  informaci√≥n y conocimientos es realmente admirable y ha sido una fuente de inspiraci√≥n.
  Sus tutoriales son claros, concisos y est√°n llenos de informaci√≥n valiosa. Han sido una
  herramienta invaluable en mi propio viaje de aprendizaje en FrontEnd. Desde HTML y CSS
  hasta JavaScript y React, sus lecciones han sido fundamentales en mi comprensi√≥n de estas
  tecnolog√≠as.  
  `,
  magic8ball: `
  # <center> üé± Magic 8 Ball </center>
  
  Es una sencilla aplicaci√≥n web interactiva que simula el cl√°sico juguete "Magic 8 Ball" para predecir la fortuna. Este juego es conocido por proporcionar respuestas aleatorias a preguntas de s√≠ o no planteadas por el usuario. La aplicaci√≥n est√° construida utilizando HTML, CSS y JavaScript.
  
  
  
  ## üë∑‚Äç‚ôÇÔ∏è ¬øC√≥mo Funciona?
  
  - **Interfaz de Usuario:** El juego ofrece una interfaz de usuario que muestra un t√≠tulo ("Magic 8 Ball") y un bot√≥n.
  - **Ingreso de Pregunta:** Cuando el usuario hace clic en el bot√≥n "Click para obtener tu respuesta", se genera y muestra una respuesta aleatoria.
  - **Generaci√≥n de Respuesta:** La aplicaci√≥n selecciona aleatoriamente una respuesta de una lista predefinida de posibles respuestas. Estas respuestas van desde positivas y afirmativas hasta negativas e inciertas.
  - **Animaci√≥n:** La respuesta seleccionada se muestra con una animaci√≥n de estilo m√°quina de escribir, donde el texto aparece como si se estuviera escribiendo. La animaci√≥n le da un toque divertido e interactivo a la aplicaci√≥n.
  - **Reutilizaci√≥n e Interacci√≥n:** El usuario puede continuar haciendo preguntas y haciendo clic en el bot√≥n para obtener nuevas respuestas aleatorias cada vez.
  
  
  ## üìå Explicaci√≥n del C√≥digo
  
  Se define una funci√≥n **magic8BallRender** que crea y configura la interfaz del juego de la Magic 8 Ball. A continuaci√≥n, se describe cada uno de los componentes clave:  
  
  - **Arreglo de Respuestas:** El arreglo **rta** contiene una lista de posibles respuestas de la Bola 8 M√°gica, representadas por emojis y texto.
  - **Manipulaci√≥n del DOM:** El c√≥digo crea y manipula diversos elementos HTML utilizando la API del DOM (Document Object Model) para construir la interfaz del juego.
  - **Generaci√≥n de Respuesta:** La funci√≥n **getRta** se llama cuando se hace clic en el bot√≥n. Genera un √≠ndice aleatorio para seleccionar una respuesta del arreglo **rta** y la muestra con un efecto de animaci√≥n de m√°quina de escribir.
  - **Restablecimiento de Animaci√≥n:** Antes de aplicar la animaci√≥n de escritura para mostrar la respuesta, se restablece cualquier animaci√≥n existente para garantizar una ejecuci√≥n fluida de la animaci√≥n.
  ## üìù Nota
  
  Este peque√±o proyecto fueron mis primeros pasos en JavaScript. A continuaci√≥n, est√° el c√≥digo original que funcionaba con alert y prompt, funci√≥n con while, utilizando switch. Siempre intent√© aplicar todo lo aprendido en mis proyectos, pero a veces menos es m√°s. Por el aprecio que me genera ver mis comienzos, optimic√© el c√≥digo y de esta forma simplific√°ndolo, y de un aspecto m√°s legible.
  <br/>  
  <pre>
  <code class="hljs language-javascript">
  function randomNum(max){
    return Math.floor(Math.random()*max);
  }
  function whileSoN(){
    while (jugar!='s' && jugar!='n'){
    jugar = prompt('Te dije S √≥ N !!! (ÔºûÔ∏øÔºú)').toLowerCase();
    } 
  }
  let jugar = prompt('Hola! („Å£‚óï‚Äø‚óï)„Å£ ¬øQuieres consultarme tu futuro? S/N').toLowerCase();
  whileSoN();
  while (jugar == 's'){	
    let pregunta = prompt('(ÔΩ°‚óï‚Äø‚óïÔΩ°) Hazme una pregunta..')
    switch (randomNum(10)){
      case 0:			
        alert(pregunta+' '+'(‡≤†‚Äø‡≤†) Es cierto.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 1:
        alert(pregunta+' '+'( Õ°¬∞ Õú ñ Õ°¬∞) Es decididamente as√≠.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 2:
        alert(pregunta+' '+'(¬∞‚Äø‚Äø¬∞) Sin lugar a dudas.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ ¬øQuieres hacer otra pregunta? S/N').toLowerCase();			
        whileSoN();
        break;
      case 3:
        alert(pregunta+' '+'Ôºà„ÄÄÔæü–îÔæüÔºâ Respuesta confusa, vuelve a intentarlo.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 4:
        alert(pregunta+' '+'(‚©æÔπè‚©Ω) Vuelve a preguntar m√°s tarde.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 5:
        alert(pregunta+' '+'(“Ç‚ó°_‚ó°) Mejor no decirte ahora.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 6:
        alert(pregunta+' '+'(‡≤†_‡≤†) No cuentes con ello.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 7:
        alert(pregunta+' '+'(‚äôÔπè‚äô) Mi respuesta es no.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 8:
        alert(pregunta+' '+'(‡≤•‚å£‡≤•) Mis fuentes dicen que no.');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();
        whileSoN();
        break;
      case 9:
        alert(pregunta+' '+'(‚ï¨ ‡≤†Áõä‡≤†) No se, lo unico que puedo afirmar que el Bojo es un flancito');
        jugar = prompt('(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ¬øQuieres hacer otra pregunta? S/N').toLowerCase();			
        whileSoN();
        break;
    }	
  }
   alert('Adios (‚©æÔπè‚©Ω)');
   </code>
   </pre>  
  ## üë§ Authors
  
  - [@mvazquezmartin](https://github.com/mvazquezmartin)<base target="_blank">
  - [Repositorio](https://github.com/mvazquezmartin/practica_js.git)<base target="_blank">
  
  
  
  `,
  socketIo: `
  # <center> üì° Socket.io Chat 1.0v </center>
  
  Este chat es una aplicaci√≥n que permite a los usuarios conectarse y chatear en tiempo real. Est√° basado en tecnolog√≠as como Node.js para el backend y Socket.IO para la comunicaci√≥n en tiempo real entre el servidor y los clientes.
  ## üìö Tech Stack
  [![My Skills](https://skillicons.dev/icons?i=nodejs,html,css,js)](https://skillicons.dev)
  - **Dependencias:** Socket.io, SweetAlert2.
  
  
  
  ## üë∑‚Äç‚ôÇÔ∏è ¬øC√≥mo Funciona?
  
  ### <ins>**Cliente**</ins>
  El archivo **chat.js** contiene el c√≥digo para la parte del cliente de la aplicaci√≥n de chat. Aqu√≠ se describen las principales funciones y eventos que se manejan en el cliente:  
  1. **Conexi√≥n del Usuario:**
  - El cliente se conecta al servidor de Socket.IO.
  - El usuario debe introducir su nombre a trav√©s de una ventana emergente (sweetAlert) cuando hace clic en el bot√≥n "Connect".
  - Una vez conectado, el cliente emite el evento "**newUser**" al servidor con el nombre del usuario.
  - Los usuarios conectados se actualizan en la lista de usuarios y se muestra una alerta de conexi√≥n exitosa.  
  2. **Desconexi√≥n del Usuario:**
  - Cuando el usuario hace clic en el bot√≥n "**Disconnect**", se desconecta del servidor.
  - Se muestra una alerta de desconexi√≥n y el usuario se elimina de la lista de usuarios.  
  3. **Env√≠o de Mensajes:**
  - El cliente puede escribir mensajes en un cuadro de chat y presionar "Enter" para enviarlos.
  - Los mensajes enviados se emiten al servidor a trav√©s del evento "**message**".
  - Los mensajes recibidos se muestran en el cuadro de chat.  
  4. **Actualizaci√≥n y Consulta de Usuarios y Mensajes:**
  - El cliente puede solicitar los registros de chat anteriores haciendo clic en el bot√≥n "**Connect**" despu√©s de iniciar sesi√≥n.
  - La aplicaci√≥n consulta el servidor para obtener los mensajes y la lista actualizada de usuarios.
  
  
  ### <ins>**Servidor**</ins>
  El archivo **socket.config.js** contiene el c√≥digo para el servidor de la aplicaci√≥n de chat. Se describen las principales funciones y eventos que se manejan en el servidor:
  1. **Configuraci√≥n del Socket:**
  - El servidor utiliza la biblioteca Socket.IO para gestionar las conexiones de los clientes.
  - Cuando un cliente se conecta, se muestra un mensaje en la consola.
  2. **Nuevo Usuario:**
  - Cuando un cliente emite el evento "**newUser**" al conectarse, se almacena el nombre del usuario y se emiten eventos de conexi√≥n y actualizaci√≥n de usuarios a todos los clientes conectados.
  3. **Desconexi√≥n del Usuario:**
  - Cuando un cliente se desconecta, se elimina el usuario de la lista y se emiten eventos de desconexi√≥n y actualizaci√≥n de usuarios.
  4. **Env√≠o y Recepci√≥n de Mensajes:**
  - Los mensajes enviados por un cliente se almacenan y se emiten a todos los clientes conectados para que puedan ver el registro del chat.
  ## üìù Nota
  
  Quiero agradecerle a **Diego Naranjo**, mi profesor en CoderHouse Backend, por ser una fuente constante de motivaci√≥n y aliento. A veces puede ser abrumador aprender una nueva habilidad, pero sus palabras de aliento y apoyo han sido un impulso incre√≠ble para seguir adelante.
  ## üë§ Authors
  
  - [@mvazquezmartin](https://github.com/mvazquezmartin)<base target="_blank">
  
  
  `,
  CRUD: `
  # API de Administraci√≥n CRUD con Almacenamiento Din√°mico 
    
  Esta API facilita las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sobre datos, ofreciendo la flexibilidad de elegir entre el uso de una base de datos MongoDB o un archivo JSON para el almacenamiento. La implementaci√≥n incorpora el patr√≥n de dise√±o Strategy, permitiendo cambiar el m√©todo de persistencia en tiempo de ejecuci√≥n.  
    
  ![STRATEGY](${imgPath.STRATEGY})  
    
  ## API Reference
  *respuestas MongoDb
    
  #### Get all items    
  \`\`\`http
    GET /api/cruds?persistence=mongodb
  \`\`\`
  <br>

  \`\`\`json
  Response:
  {
      "status": "success",
      "message": "Items found",
      "payload": [
          {
              "_id": "6537191ad540729aaa2106a2",
              "title": "prueba2",
              "description": "description 2",
              "category": "category 2",
              "image": "https://dummyimage.com/300x200/000/fff",
              "price": 99,
              "stock": 99,
              "status": true,
              "__v": 0
          },
          ...
      ]
  }
  \`\`\`
  <br>
    
  #### Get one item by id    
  \`\`\`http
    GET /api/cruds/:id?persistence=mongodb
  \`\`\`
  <br>
    
  \`\`\`json
  Response:
  {
      "status": "success",
      "message": "Item find",
      "payload": {
          "_id": "6537191ad540729aaa2106a1",
          "title": "prueba1",
          "description": "description 1",
          "category": "category 1",
          "image": "https://dummyimage.com/300x200/000/fff",
          "price": 99,
          "stock": 99,
          "status": true,
          "__v": 0
      }
  }
  \`\`\`
  <br>
    
  #### Create new item    
  \`\`\`http
    POST /api/cruds?persistence=mongodb
  \`\`\`
  <br>
    
  \`\`\`http
  Request body:
  {
      "title": "prueba",
      "description": "description",
      "category": "category",
      "image": "img.jpg",
      "price": 99.99,
      "stock": 99
  }
  \`\`\`
  <br>

  \`\`\`json
  Response:
  {
      "status": "success",
      "message": "Item find",
      "payload": {
          "_id": "6537191ad540729aaa2106a1",
          "title": "prueba1",
          "description": "description 1",
          "category": "category 1",
          "image": "https://dummyimage.com/300x200/000/fff",
          "price": 99,
          "stock": 99,
          "status": true,
          "__v": 0
      }
  }
  \`\`\`
  <br>

  #### Modify existing item
  \`\`\`http
    PATCH /api/cruds/:id?persistence=mongodb
  \`\`\`
  <br>

  \`\`\`http
  Request body:
  {
      "title": "PRUEBA MODIFICACION"
  }
  \`\`\`
  <br>

  \`\`\`json
  {
      "status": "success",
      "message": "Item successfully modified",
      "payload": {
          "_id": "6537191ad540729aaa2106a1",
          "title": "PRUEBA MODIFICACION",
          "description": "description 1",
          "category": "category 1",
          "image": "https://dummyimage.com/300x200/000/fff",
          "price": 99,
          "stock": 99,
          "status": true
      }
  }
  \`\`\`
  <br>
  
  #### Delete by id
  \`\`\`http
    DELETE /api/cruds/:id?persistence=mongodb
  \`\`\`
  <br>

  \`\`\`json
  Response:
  {    
      "status": "success",
      "message": "Item deleted successfully",
      "payload": {
          "_id": "6537191ad540729aaa2106a1",
          "title": "prueba1",
          "description": "description 1",
          "category": "category 1",
          "image": "https://dummyimage.com/300x200/000/fff",
          "price": 99,
          "stock": 99,
          "status": true,
          "__v": 0
      }
  }
  \`\`\`
  <br>
  
  #### Restart data
  \`\`\`http
    GET /api//cruds/restart?persistence=mongodb
  \`\`\`
  <br>
    
  \`\`\`json
  {
      "status": "success",
      "message": "Items restart to orinal file",
      "payload": []
  }
  \`\`\`
  `,
  README: `
  # <center> VSCode Portfolio </center>
  Un sitio web con tem√°tica de Visual Studio Code construido con un solo HTML, SASS y JavaScript. M√°s que un cl√°sico README, voy a contar los desaf√≠os y progresos que atraves√© replicando la est√©tica y algunas funcionalidades de VSCode.
  ## üìö Tech Stack üë®‚Äçüíª
  
  **Cliente:**  
  [![My Skills](https://skillicons.dev/icons?i=html,sass,js)](https://skillicons.dev)
  
  **Servidor:**  
  [![My Skills](https://skillicons.dev/icons?i=nodejs,express)](https://skillicons.dev)
  
  **Dependencias:** Axios, Dotenv, Mongoose, Multer, Path, Socket.io.  
  **Librerias:** Bootstrap Icons, SweetAlert2, HighlightJs, MarkedJs.
  
  ## üìÉ Documentaci√≥n üìë
  ### ü§î ¬øPor qu√© JavaScript y no un Framework?
  En un principio cuando me surgi√≥ la idea, ve√≠a m√°s viable el proyecto hacerlo con ReactJS, pero entonces se me manifest√≥ un dilema. React me soluciona problemas que no entiendo el origen, y es por ello que decid√≠ utilizar JavaScript y desafiarme a crear mis propios componentes y clases.
  ### üé® Color Reference
  En la selecci√≥n de colores me bas√© en mi tema que uso a diario en mi VSCode, Dr√°cula.
  
  | Color             | Hex                                                                |
  | ----------------- | ------------------------------------------------------------------ |
  | Background | ![#282A36](https://via.placeholder.com/10/282A36?text=+) #282A36 |
  | Secondary Background | ![#1d1e24](https://via.placeholder.com/10/1d1e24?text=+) #1d1e24 |
  | Grid Border | ![#44475a](https://via.placeholder.com/10/44475a?text=+) #44475a |
  | Font Color | ![#f0f8ff](https://via.placeholder.com/10/f0f8ff?text=+) #f0f8ff |
  | Comment | ![#6272a4](https://via.placeholder.com/10/6272a4?text=+) #6272a4 |
  | Pink | ![#ff79c6](https://via.placeholder.com/10/ff79c6?text=+) #ff79c6 |
  | Purple | ![#bd93f9](https://via.placeholder.com/10/bd93f9?text=+) #bd93f9 |
  
  
  ### üî≤ Layout
  El layout principal del sitio utilic√© Grid, y me ayud√© con una p√°gina, [Layouit!](https://grid.layoutit.com/) que me parece muy √∫til para los que no somos expertos en CSS. Despu√©s en cada componente emple√© Flexbox que estoy m√°s familiarizado.
  ### üì± Responsive
  Muy probable que esta versi√≥n, todav√≠a no este 100% √≥ptima para adaptarse a todos los dispositivos. Estar√© trabajando en ello.
  
  ## üîé Explorer
  ### üìÅ "Assets"
  En el sidebar donde se representa la ra√≠z de carpetas, assets fue la primer funci√≥n que hice para renderizar en la principal vista. Sencilla, pero eficaz, espero que sean de su agrado los memes üòÖ.
  ### üìù "PlayGround"
  No ser√≠a un IDE si no se puede programar algo. Aunque no tiene ninguna funci√≥n extra como indentaci√≥n, resaltar la sintaxis o autocompletado, cumple su objetivo. Pr√≥ximamente, estar√© investigando como integrar todo eso con NodeJs y CodeMirror.
  ## üìö Stack
  
  ### üì¶ "Installed"
  Las tecnolog√≠as que est√°n en esta secci√≥n son las que estoy familiarizado, conozco su utilidad y su sintaxis, no quiere decir que las controle de principio a fin. En el futuro, estoy dispuesto a aprender a manejarlas, aunque entiendo que no es posible llegar a un dominio total de ellas.
  ### üìñ "Next To Learn"
  Como est√°n presentadas, es el orden esperado a aprenderlas. Por lo que no hice el portfolio en React, es la misma raz√≥n que sigo controlando Express y no NestJs. El aprendizaje no es de un d√≠a para el otro, es un proceso donde hay que disfrutar las peque√±as victorias. 
  ## ‚≠ê Bookmarks
  ### üìå "Favorite"
  B√°sicamente, est√°n los sitios web que utilice de ayuda para construir el portfolio, y adem√°s otros sitios que me parecen interesante de compartir. Continuar√© a√±adiendo m√°s a medida que los descubra.
  ### üìº "Recommended Channels"
  Con la misma idea que "Favorite", solo que en esta secci√≥n comparto los canales de YouTube que consumo a diario y que considero que brindan buen material.  
  Lo interesante de esta secci√≥n, es que consumo la api YouTube Data V3 para la informaci√≥n de los canales. Debido a la cantidad de datos que solicito, cumpl√≠a la cuota de peticiones diaria en un lapso corto, por ende cree un archivo JSON que funciona como una memoria cache donde se almacena una copia de las respuestas. Este archivo se actualiza cada 24 horas, ya que la informaci√≥n no va a variar demasiado en ese tiempo.
  ## üìû Contact
  A pesar de su aparente simplicidad como una presentaci√≥n de mis redes de contacto, su creaci√≥n result√≥ m√°s desafiante de lo esperado. Estoy satisfecho con el resultado final, que se asemeja a la estructura de un archivo JSON.
  ## üê± Github
  En esta secci√≥n, del lado del backend, cree una capa servicio que se encarga de administrar el cach√©. Es la que se responsabiliza de realizar una copia de las peticiones a la API p√∫blica de Github y almacenar en un archivo JSON. Esta capa tambi√©n se utiliza en Bookmarks para las consultas a la API de YouTube.
  ## üèÜ Logros
  En este proyecto, me enfrent√© a numerosos desaf√≠os y experiment√© momentos de frustraci√≥n. Sin embargo, me enorgullece destacar los logros alcanzados, especialmente en el √°mbito del frontend. Aunque no sea mi dominio principal, tuve la oportunidad de dise√±ar completamente el sistema de pesta√±as desde cero, y estoy muy satisfecho con el resultado obtenido. Otra secci√≥n que destaco es la barra lateral 'Explorer', donde simul√© el directorio de carpetas y utilic√© recursividad para renderizar las subcarpetas.  
  En el lado del Backend, logr√© implementar el patr√≥n strategy, el cual se encarga de intercambiar la persistencia de los datos en tiempo de ejecuci√≥n en operaciones CRUD. Adem√°s, la capa de servicio de cach√© fue otro gran logro, ya que resolv√≠ las limitaciones de respuestas diarias de las APIs externas, permitiendo la reutilizaci√≥n para realizar otras consultas.
    
    
  Estoy realmente satisfecho con estos logros y el aprendizaje significativo que obtuve durante el desarrollo del proyecto.
  ## Strategy Pattern
  ![STRATEGY](${imgPath.STRATEGY})

  ## Cache Manager
  ![CACHE](${imgPath.CACHE})
  `,
};

export { readme };
